# coding: utf-8

"""
    IP RL BSP API

    IP RL BSP API for participation in capacity/energy market tenders.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class BatchApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def batch(self, **kwargs):  # noqa: E501
        """Submit batch requests  # noqa: E501

        Batch requests take the form of a series of REST API requests. The overall result in the form of arrayed REST API responses is then returned to the client. This is useful for reducing HTTP overhead. The following conditions apply when using the batch endpoint:   * The responses to the operations are returned in the same order as requested.   * Only POST, PATCH and DELETE methods on /bids are supported.   * The number of operations per batch is limited to 100.   * Each operation is executed separately. The failure of one operation has no effect on the execution of the other operations in the batch or the processing of the overall batch. There is no transactionality across or dependency between single batch operations. E.g. one operation can fail and all following can still succeed!   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchRequest body:
        :return: BatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def batch_with_http_info(self, **kwargs):  # noqa: E501
        """Submit batch requests  # noqa: E501

        Batch requests take the form of a series of REST API requests. The overall result in the form of arrayed REST API responses is then returned to the client. This is useful for reducing HTTP overhead. The following conditions apply when using the batch endpoint:   * The responses to the operations are returned in the same order as requested.   * Only POST, PATCH and DELETE methods on /bids are supported.   * The number of operations per batch is limited to 100.   * Each operation is executed separately. The failure of one operation has no effect on the execution of the other operations in the batch or the processing of the overall batch. There is no transactionality across or dependency between single batch operations. E.g. one operation can fail and all following can still succeed!   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchRequest body:
        :return: BatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/batch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
