# coding: utf-8

"""
    IP RL BSP API

    IP RL BSP API for participation in capacity/energy market tenders.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BalancingServiceProvider(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'short_name': 'str',
        'name': 'str',
        'eic': 'EIC'
    }

    attribute_map = {
        'short_name': 'shortName',
        'name': 'name',
        'eic': 'eic'
    }

    def __init__(self, short_name=None, name=None, eic=None):  # noqa: E501
        """BalancingServiceProvider - a model defined in Swagger"""  # noqa: E501
        self._short_name = None
        self._name = None
        self._eic = None
        self.discriminator = None
        if short_name is not None:
            self.short_name = short_name
        if name is not None:
            self.name = name
        self.eic = eic

    @property
    def short_name(self):
        """Gets the short_name of this BalancingServiceProvider.  # noqa: E501

        A short, human-readable name of the provider.  # noqa: E501

        :return: The short_name of this BalancingServiceProvider.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this BalancingServiceProvider.

        A short, human-readable name of the provider.  # noqa: E501

        :param short_name: The short_name of this BalancingServiceProvider.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def name(self):
        """Gets the name of this BalancingServiceProvider.  # noqa: E501

        Full, human-readable name of the provider.  # noqa: E501

        :return: The name of this BalancingServiceProvider.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BalancingServiceProvider.

        Full, human-readable name of the provider.  # noqa: E501

        :param name: The name of this BalancingServiceProvider.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def eic(self):
        """Gets the eic of this BalancingServiceProvider.  # noqa: E501


        :return: The eic of this BalancingServiceProvider.  # noqa: E501
        :rtype: EIC
        """
        return self._eic

    @eic.setter
    def eic(self, eic):
        """Sets the eic of this BalancingServiceProvider.


        :param eic: The eic of this BalancingServiceProvider.  # noqa: E501
        :type: EIC
        """
        if eic is None:
            raise ValueError("Invalid value for `eic`, must not be `None`")  # noqa: E501

        self._eic = eic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BalancingServiceProvider, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BalancingServiceProvider):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
