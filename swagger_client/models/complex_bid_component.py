# coding: utf-8

"""
    IP RL BSP API

    IP RL BSP API for participation in capacity/energy market tenders.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ComplexBidComponent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bid_type': 'BidType',
        'complex_bid_id': 'BidIdentification',
        'direction': 'Direction',
        'min_quantity': 'Quantity',
        'offered_quantity': 'Quantity',
        'prices': 'Prices',
        'tag': 'BidTag'
    }

    attribute_map = {
        'bid_type': 'bidType',
        'complex_bid_id': 'complexBidId',
        'direction': 'direction',
        'min_quantity': 'minQuantity',
        'offered_quantity': 'offeredQuantity',
        'prices': 'prices',
        'tag': 'tag'
    }

    def __init__(self, bid_type=None, complex_bid_id=None, direction=None, min_quantity=None, offered_quantity=None, prices=None, tag=None):  # noqa: E501
        """ComplexBidComponent - a model defined in Swagger"""  # noqa: E501
        self._bid_type = None
        self._complex_bid_id = None
        self._direction = None
        self._min_quantity = None
        self._offered_quantity = None
        self._prices = None
        self._tag = None
        self.discriminator = None
        if bid_type is not None:
            self.bid_type = bid_type
        if complex_bid_id is not None:
            self.complex_bid_id = complex_bid_id
        self.direction = direction
        if min_quantity is not None:
            self.min_quantity = min_quantity
        self.offered_quantity = offered_quantity
        self.prices = prices
        if tag is not None:
            self.tag = tag

    @property
    def bid_type(self):
        """Gets the bid_type of this ComplexBidComponent.  # noqa: E501


        :return: The bid_type of this ComplexBidComponent.  # noqa: E501
        :rtype: BidType
        """
        return self._bid_type

    @bid_type.setter
    def bid_type(self, bid_type):
        """Sets the bid_type of this ComplexBidComponent.


        :param bid_type: The bid_type of this ComplexBidComponent.  # noqa: E501
        :type: BidType
        """

        self._bid_type = bid_type

    @property
    def complex_bid_id(self):
        """Gets the complex_bid_id of this ComplexBidComponent.  # noqa: E501


        :return: The complex_bid_id of this ComplexBidComponent.  # noqa: E501
        :rtype: BidIdentification
        """
        return self._complex_bid_id

    @complex_bid_id.setter
    def complex_bid_id(self, complex_bid_id):
        """Sets the complex_bid_id of this ComplexBidComponent.


        :param complex_bid_id: The complex_bid_id of this ComplexBidComponent.  # noqa: E501
        :type: BidIdentification
        """

        self._complex_bid_id = complex_bid_id

    @property
    def direction(self):
        """Gets the direction of this ComplexBidComponent.  # noqa: E501


        :return: The direction of this ComplexBidComponent.  # noqa: E501
        :rtype: Direction
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this ComplexBidComponent.


        :param direction: The direction of this ComplexBidComponent.  # noqa: E501
        :type: Direction
        """
        if direction is None:
            raise ValueError("Invalid value for `direction`, must not be `None`")  # noqa: E501

        self._direction = direction

    @property
    def min_quantity(self):
        """Gets the min_quantity of this ComplexBidComponent.  # noqa: E501


        :return: The min_quantity of this ComplexBidComponent.  # noqa: E501
        :rtype: Quantity
        """
        return self._min_quantity

    @min_quantity.setter
    def min_quantity(self, min_quantity):
        """Sets the min_quantity of this ComplexBidComponent.


        :param min_quantity: The min_quantity of this ComplexBidComponent.  # noqa: E501
        :type: Quantity
        """

        self._min_quantity = min_quantity

    @property
    def offered_quantity(self):
        """Gets the offered_quantity of this ComplexBidComponent.  # noqa: E501


        :return: The offered_quantity of this ComplexBidComponent.  # noqa: E501
        :rtype: Quantity
        """
        return self._offered_quantity

    @offered_quantity.setter
    def offered_quantity(self, offered_quantity):
        """Sets the offered_quantity of this ComplexBidComponent.


        :param offered_quantity: The offered_quantity of this ComplexBidComponent.  # noqa: E501
        :type: Quantity
        """
        if offered_quantity is None:
            raise ValueError("Invalid value for `offered_quantity`, must not be `None`")  # noqa: E501

        self._offered_quantity = offered_quantity

    @property
    def prices(self):
        """Gets the prices of this ComplexBidComponent.  # noqa: E501


        :return: The prices of this ComplexBidComponent.  # noqa: E501
        :rtype: Prices
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """Sets the prices of this ComplexBidComponent.


        :param prices: The prices of this ComplexBidComponent.  # noqa: E501
        :type: Prices
        """
        if prices is None:
            raise ValueError("Invalid value for `prices`, must not be `None`")  # noqa: E501

        self._prices = prices

    @property
    def tag(self):
        """Gets the tag of this ComplexBidComponent.  # noqa: E501


        :return: The tag of this ComplexBidComponent.  # noqa: E501
        :rtype: BidTag
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ComplexBidComponent.


        :param tag: The tag of this ComplexBidComponent.  # noqa: E501
        :type: BidTag
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComplexBidComponent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComplexBidComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
