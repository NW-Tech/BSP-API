# coding: utf-8

"""
    IP RL BSP API

    IP RL BSP API for participation in capacity/energy market tenders.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BatchResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'responses': 'list[BatchOperationResponse]',
        'successful_ops': 'int',
        'failed_ops': 'int'
    }

    attribute_map = {
        'responses': 'responses',
        'successful_ops': 'successfulOps',
        'failed_ops': 'failedOps'
    }

    def __init__(self, responses=None, successful_ops=None, failed_ops=None):  # noqa: E501
        """BatchResponse - a model defined in Swagger"""  # noqa: E501
        self._responses = None
        self._successful_ops = None
        self._failed_ops = None
        self.discriminator = None
        if responses is not None:
            self.responses = responses
        if successful_ops is not None:
            self.successful_ops = successful_ops
        if failed_ops is not None:
            self.failed_ops = failed_ops

    @property
    def responses(self):
        """Gets the responses of this BatchResponse.  # noqa: E501

        Contains the list of individual responses in the order of the batch requests.  # noqa: E501

        :return: The responses of this BatchResponse.  # noqa: E501
        :rtype: list[BatchOperationResponse]
        """
        return self._responses

    @responses.setter
    def responses(self, responses):
        """Sets the responses of this BatchResponse.

        Contains the list of individual responses in the order of the batch requests.  # noqa: E501

        :param responses: The responses of this BatchResponse.  # noqa: E501
        :type: list[BatchOperationResponse]
        """

        self._responses = responses

    @property
    def successful_ops(self):
        """Gets the successful_ops of this BatchResponse.  # noqa: E501

        Number of successful requests (2xx status code).  # noqa: E501

        :return: The successful_ops of this BatchResponse.  # noqa: E501
        :rtype: int
        """
        return self._successful_ops

    @successful_ops.setter
    def successful_ops(self, successful_ops):
        """Sets the successful_ops of this BatchResponse.

        Number of successful requests (2xx status code).  # noqa: E501

        :param successful_ops: The successful_ops of this BatchResponse.  # noqa: E501
        :type: int
        """

        self._successful_ops = successful_ops

    @property
    def failed_ops(self):
        """Gets the failed_ops of this BatchResponse.  # noqa: E501

        Number of failed requests (all non 2xx status codes).  # noqa: E501

        :return: The failed_ops of this BatchResponse.  # noqa: E501
        :rtype: int
        """
        return self._failed_ops

    @failed_ops.setter
    def failed_ops(self, failed_ops):
        """Sets the failed_ops of this BatchResponse.

        Number of failed requests (all non 2xx status codes).  # noqa: E501

        :param failed_ops: The failed_ops of this BatchResponse.  # noqa: E501
        :type: int
        """

        self._failed_ops = failed_ops

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatchResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
