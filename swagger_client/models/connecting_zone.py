# coding: utf-8

"""
    IP RL BSP API

    IP RL BSP API for participation in capacity/energy market tenders.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConnectingZone(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'zone_type': 'str',
        'zone': 'str'
    }

    attribute_map = {
        'zone_type': 'zoneType',
        'zone': 'zone'
    }

    def __init__(self, zone_type=None, zone=None):  # noqa: E501
        """ConnectingZone - a model defined in Swagger"""  # noqa: E501
        self._zone_type = None
        self._zone = None
        self.discriminator = None
        self.zone_type = zone_type
        self.zone = zone

    @property
    def zone_type(self):
        """Gets the zone_type of this ConnectingZone.  # noqa: E501


        :return: The zone_type of this ConnectingZone.  # noqa: E501
        :rtype: str
        """
        return self._zone_type

    @zone_type.setter
    def zone_type(self, zone_type):
        """Sets the zone_type of this ConnectingZone.


        :param zone_type: The zone_type of this ConnectingZone.  # noqa: E501
        :type: str
        """
        if zone_type is None:
            raise ValueError("Invalid value for `zone_type`, must not be `None`")  # noqa: E501
        allowed_values = ["COUNTRY", "LFC_AREA", "LFC_BLOCK"]  # noqa: E501
        if zone_type not in allowed_values:
            raise ValueError(
                "Invalid value for `zone_type` ({0}), must be one of {1}"  # noqa: E501
                .format(zone_type, allowed_values)
            )

        self._zone_type = zone_type

    @property
    def zone(self):
        """Gets the zone of this ConnectingZone.  # noqa: E501


        :return: The zone of this ConnectingZone.  # noqa: E501
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this ConnectingZone.


        :param zone: The zone of this ConnectingZone.  # noqa: E501
        :type: str
        """
        if zone is None:
            raise ValueError("Invalid value for `zone`, must not be `None`")  # noqa: E501

        self._zone = zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectingZone, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectingZone):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
