# coding: utf-8

"""
    IP RL BSP API

    IP RL BSP API for participation in capacity/energy market tenders.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PrequalifiedCapacity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_type': 'ProductType',
        'connecting_zone': 'ConnectingZone',
        'max_negative_capacity': 'float',
        'max_positive_capacity': 'float'
    }

    attribute_map = {
        'product_type': 'productType',
        'connecting_zone': 'connectingZone',
        'max_negative_capacity': 'maxNegativeCapacity',
        'max_positive_capacity': 'maxPositiveCapacity'
    }

    def __init__(self, product_type=None, connecting_zone=None, max_negative_capacity=None, max_positive_capacity=None):  # noqa: E501
        """PrequalifiedCapacity - a model defined in Swagger"""  # noqa: E501
        self._product_type = None
        self._connecting_zone = None
        self._max_negative_capacity = None
        self._max_positive_capacity = None
        self.discriminator = None
        if product_type is not None:
            self.product_type = product_type
        if connecting_zone is not None:
            self.connecting_zone = connecting_zone
        if max_negative_capacity is not None:
            self.max_negative_capacity = max_negative_capacity
        if max_positive_capacity is not None:
            self.max_positive_capacity = max_positive_capacity

    @property
    def product_type(self):
        """Gets the product_type of this PrequalifiedCapacity.  # noqa: E501


        :return: The product_type of this PrequalifiedCapacity.  # noqa: E501
        :rtype: ProductType
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this PrequalifiedCapacity.


        :param product_type: The product_type of this PrequalifiedCapacity.  # noqa: E501
        :type: ProductType
        """

        self._product_type = product_type

    @property
    def connecting_zone(self):
        """Gets the connecting_zone of this PrequalifiedCapacity.  # noqa: E501


        :return: The connecting_zone of this PrequalifiedCapacity.  # noqa: E501
        :rtype: ConnectingZone
        """
        return self._connecting_zone

    @connecting_zone.setter
    def connecting_zone(self, connecting_zone):
        """Sets the connecting_zone of this PrequalifiedCapacity.


        :param connecting_zone: The connecting_zone of this PrequalifiedCapacity.  # noqa: E501
        :type: ConnectingZone
        """

        self._connecting_zone = connecting_zone

    @property
    def max_negative_capacity(self):
        """Gets the max_negative_capacity of this PrequalifiedCapacity.  # noqa: E501

        Volume of maximum negative reserve in specific connecting zone.  # noqa: E501

        :return: The max_negative_capacity of this PrequalifiedCapacity.  # noqa: E501
        :rtype: float
        """
        return self._max_negative_capacity

    @max_negative_capacity.setter
    def max_negative_capacity(self, max_negative_capacity):
        """Sets the max_negative_capacity of this PrequalifiedCapacity.

        Volume of maximum negative reserve in specific connecting zone.  # noqa: E501

        :param max_negative_capacity: The max_negative_capacity of this PrequalifiedCapacity.  # noqa: E501
        :type: float
        """

        self._max_negative_capacity = max_negative_capacity

    @property
    def max_positive_capacity(self):
        """Gets the max_positive_capacity of this PrequalifiedCapacity.  # noqa: E501

        Volume of maximum positive reserve in specific connecting zone.  # noqa: E501

        :return: The max_positive_capacity of this PrequalifiedCapacity.  # noqa: E501
        :rtype: float
        """
        return self._max_positive_capacity

    @max_positive_capacity.setter
    def max_positive_capacity(self, max_positive_capacity):
        """Sets the max_positive_capacity of this PrequalifiedCapacity.

        Volume of maximum positive reserve in specific connecting zone.  # noqa: E501

        :param max_positive_capacity: The max_positive_capacity of this PrequalifiedCapacity.  # noqa: E501
        :type: float
        """

        self._max_positive_capacity = max_positive_capacity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrequalifiedCapacity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrequalifiedCapacity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
