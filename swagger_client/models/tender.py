# coding: utf-8

"""
    IP RL BSP API

    IP RL BSP API for participation in capacity/energy market tenders.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Tender(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'TenderIdentification',
        'product_type': 'ProductType',
        'delivery_date': 'date',
        'market': 'ReserveMarket',
        'time_interval': 'TimeInterval',
        'gate_open_time': 'datetime',
        'gate_closure_time': 'datetime',
        'state': 'str',
        'result': 'str',
        'run_number': 'int',
        'products': 'list[ProductName]',
        'business_rules_key': 'str'
    }

    attribute_map = {
        'id': 'id',
        'product_type': 'productType',
        'delivery_date': 'deliveryDate',
        'market': 'market',
        'time_interval': 'timeInterval',
        'gate_open_time': 'gateOpenTime',
        'gate_closure_time': 'gateClosureTime',
        'state': 'state',
        'result': 'result',
        'run_number': 'runNumber',
        'products': 'products',
        'business_rules_key': 'businessRulesKey'
    }

    def __init__(self, id=None, product_type=None, delivery_date=None, market=None, time_interval=None, gate_open_time=None, gate_closure_time=None, state=None, result=None, run_number=None, products=None, business_rules_key=None):  # noqa: E501
        """Tender - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._product_type = None
        self._delivery_date = None
        self._market = None
        self._time_interval = None
        self._gate_open_time = None
        self._gate_closure_time = None
        self._state = None
        self._result = None
        self._run_number = None
        self._products = None
        self._business_rules_key = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if product_type is not None:
            self.product_type = product_type
        if delivery_date is not None:
            self.delivery_date = delivery_date
        if market is not None:
            self.market = market
        if time_interval is not None:
            self.time_interval = time_interval
        if gate_open_time is not None:
            self.gate_open_time = gate_open_time
        if gate_closure_time is not None:
            self.gate_closure_time = gate_closure_time
        if state is not None:
            self.state = state
        if result is not None:
            self.result = result
        if run_number is not None:
            self.run_number = run_number
        if products is not None:
            self.products = products
        if business_rules_key is not None:
            self.business_rules_key = business_rules_key

    @property
    def id(self):
        """Gets the id of this Tender.  # noqa: E501


        :return: The id of this Tender.  # noqa: E501
        :rtype: TenderIdentification
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tender.


        :param id: The id of this Tender.  # noqa: E501
        :type: TenderIdentification
        """

        self._id = id

    @property
    def product_type(self):
        """Gets the product_type of this Tender.  # noqa: E501


        :return: The product_type of this Tender.  # noqa: E501
        :rtype: ProductType
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this Tender.


        :param product_type: The product_type of this Tender.  # noqa: E501
        :type: ProductType
        """

        self._product_type = product_type

    @property
    def delivery_date(self):
        """Gets the delivery_date of this Tender.  # noqa: E501

        Delivery day of offered control reserve / energy. (ISO 8601 format YYYY-MM-DD).  # noqa: E501

        :return: The delivery_date of this Tender.  # noqa: E501
        :rtype: date
        """
        return self._delivery_date

    @delivery_date.setter
    def delivery_date(self, delivery_date):
        """Sets the delivery_date of this Tender.

        Delivery day of offered control reserve / energy. (ISO 8601 format YYYY-MM-DD).  # noqa: E501

        :param delivery_date: The delivery_date of this Tender.  # noqa: E501
        :type: date
        """

        self._delivery_date = delivery_date

    @property
    def market(self):
        """Gets the market of this Tender.  # noqa: E501


        :return: The market of this Tender.  # noqa: E501
        :rtype: ReserveMarket
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this Tender.


        :param market: The market of this Tender.  # noqa: E501
        :type: ReserveMarket
        """

        self._market = market

    @property
    def time_interval(self):
        """Gets the time_interval of this Tender.  # noqa: E501


        :return: The time_interval of this Tender.  # noqa: E501
        :rtype: TimeInterval
        """
        return self._time_interval

    @time_interval.setter
    def time_interval(self, time_interval):
        """Sets the time_interval of this Tender.


        :param time_interval: The time_interval of this Tender.  # noqa: E501
        :type: TimeInterval
        """

        self._time_interval = time_interval

    @property
    def gate_open_time(self):
        """Gets the gate_open_time of this Tender.  # noqa: E501

        Gate open time of tender.  # noqa: E501

        :return: The gate_open_time of this Tender.  # noqa: E501
        :rtype: datetime
        """
        return self._gate_open_time

    @gate_open_time.setter
    def gate_open_time(self, gate_open_time):
        """Sets the gate_open_time of this Tender.

        Gate open time of tender.  # noqa: E501

        :param gate_open_time: The gate_open_time of this Tender.  # noqa: E501
        :type: datetime
        """

        self._gate_open_time = gate_open_time

    @property
    def gate_closure_time(self):
        """Gets the gate_closure_time of this Tender.  # noqa: E501

        Gate closure time of tender.  # noqa: E501

        :return: The gate_closure_time of this Tender.  # noqa: E501
        :rtype: datetime
        """
        return self._gate_closure_time

    @gate_closure_time.setter
    def gate_closure_time(self, gate_closure_time):
        """Sets the gate_closure_time of this Tender.

        Gate closure time of tender.  # noqa: E501

        :param gate_closure_time: The gate_closure_time of this Tender.  # noqa: E501
        :type: datetime
        """

        self._gate_closure_time = gate_closure_time

    @property
    def state(self):
        """Gets the state of this Tender.  # noqa: E501

        Actual state of the tender. For detailed information on the tender state model, see the [reference guide.](/docs/guide#tender-state-model)  # noqa: E501

        :return: The state of this Tender.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Tender.

        Actual state of the tender. For detailed information on the tender state model, see the [reference guide.](/docs/guide#tender-state-model)  # noqa: E501

        :param state: The state of this Tender.  # noqa: E501
        :type: str
        """
        allowed_values = ["OPEN", "CLOSED", "CANCELED", "FINISHED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def result(self):
        """Gets the result of this Tender.  # noqa: E501

        Result of the tender. For detailed information on the specific tender results, see the [reference guide.](/docs/guide#tender-state-model)  # noqa: E501

        :return: The result of this Tender.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Tender.

        Result of the tender. For detailed information on the specific tender results, see the [reference guide.](/docs/guide#tender-state-model)  # noqa: E501

        :param result: The result of this Tender.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE_AVAILABLE", "REGULAR", "FALLBACK"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"  # noqa: E501
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def run_number(self):
        """Gets the run_number of this Tender.  # noqa: E501


        :return: The run_number of this Tender.  # noqa: E501
        :rtype: int
        """
        return self._run_number

    @run_number.setter
    def run_number(self, run_number):
        """Sets the run_number of this Tender.


        :param run_number: The run_number of this Tender.  # noqa: E501
        :type: int
        """

        self._run_number = run_number

    @property
    def products(self):
        """Gets the products of this Tender.  # noqa: E501

        Available products for tender.  # noqa: E501

        :return: The products of this Tender.  # noqa: E501
        :rtype: list[ProductName]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this Tender.

        Available products for tender.  # noqa: E501

        :param products: The products of this Tender.  # noqa: E501
        :type: list[ProductName]
        """

        self._products = products

    @property
    def business_rules_key(self):
        """Gets the business_rules_key of this Tender.  # noqa: E501

        Key to identify the current business rules for bidding. For detailed information, see the [reference guide.](/docs/guide#business-rules-key)  # noqa: E501

        :return: The business_rules_key of this Tender.  # noqa: E501
        :rtype: str
        """
        return self._business_rules_key

    @business_rules_key.setter
    def business_rules_key(self, business_rules_key):
        """Sets the business_rules_key of this Tender.

        Key to identify the current business rules for bidding. For detailed information, see the [reference guide.](/docs/guide#business-rules-key)  # noqa: E501

        :param business_rules_key: The business_rules_key of this Tender.  # noqa: E501
        :type: str
        """

        self._business_rules_key = business_rules_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Tender, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tender):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
