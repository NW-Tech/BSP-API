# coding: utf-8

"""
    IP RL BSP API

    IP RL BSP API for participation in capacity/energy market tenders.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ComplexBid(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'market': 'ReserveMarket',
        'product_type': 'ProductType',
        'bid_type': 'BidType',
        'time_interval': 'TimeInterval',
        'connecting_zone': 'ConnectingZone',
        'activation': 'ActivationType',
        'technical_linkage': 'TechnicalLinkage',
        'backup_for': 'BalancingServiceProvider',
        'tag': 'BidTag',
        'components': 'list[ComplexBidComponent]'
    }

    attribute_map = {
        'market': 'market',
        'product_type': 'productType',
        'bid_type': 'bidType',
        'time_interval': 'timeInterval',
        'connecting_zone': 'connectingZone',
        'activation': 'activation',
        'technical_linkage': 'technicalLinkage',
        'backup_for': 'backupFor',
        'tag': 'tag',
        'components': 'components'
    }

    def __init__(self, market=None, product_type=None, bid_type=None, time_interval=None, connecting_zone=None, activation=None, technical_linkage=None, backup_for=None, tag=None, components=None):  # noqa: E501
        """ComplexBid - a model defined in Swagger"""  # noqa: E501
        self._market = None
        self._product_type = None
        self._bid_type = None
        self._time_interval = None
        self._connecting_zone = None
        self._activation = None
        self._technical_linkage = None
        self._backup_for = None
        self._tag = None
        self._components = None
        self.discriminator = None
        self.market = market
        self.product_type = product_type
        self.bid_type = bid_type
        if time_interval is not None:
            self.time_interval = time_interval
        if connecting_zone is not None:
            self.connecting_zone = connecting_zone
        if activation is not None:
            self.activation = activation
        if technical_linkage is not None:
            self.technical_linkage = technical_linkage
        if backup_for is not None:
            self.backup_for = backup_for
        if tag is not None:
            self.tag = tag
        self.components = components

    @property
    def market(self):
        """Gets the market of this ComplexBid.  # noqa: E501


        :return: The market of this ComplexBid.  # noqa: E501
        :rtype: ReserveMarket
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this ComplexBid.


        :param market: The market of this ComplexBid.  # noqa: E501
        :type: ReserveMarket
        """
        if market is None:
            raise ValueError("Invalid value for `market`, must not be `None`")  # noqa: E501

        self._market = market

    @property
    def product_type(self):
        """Gets the product_type of this ComplexBid.  # noqa: E501


        :return: The product_type of this ComplexBid.  # noqa: E501
        :rtype: ProductType
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this ComplexBid.


        :param product_type: The product_type of this ComplexBid.  # noqa: E501
        :type: ProductType
        """
        if product_type is None:
            raise ValueError("Invalid value for `product_type`, must not be `None`")  # noqa: E501

        self._product_type = product_type

    @property
    def bid_type(self):
        """Gets the bid_type of this ComplexBid.  # noqa: E501


        :return: The bid_type of this ComplexBid.  # noqa: E501
        :rtype: BidType
        """
        return self._bid_type

    @bid_type.setter
    def bid_type(self, bid_type):
        """Sets the bid_type of this ComplexBid.


        :param bid_type: The bid_type of this ComplexBid.  # noqa: E501
        :type: BidType
        """
        if bid_type is None:
            raise ValueError("Invalid value for `bid_type`, must not be `None`")  # noqa: E501

        self._bid_type = bid_type

    @property
    def time_interval(self):
        """Gets the time_interval of this ComplexBid.  # noqa: E501


        :return: The time_interval of this ComplexBid.  # noqa: E501
        :rtype: TimeInterval
        """
        return self._time_interval

    @time_interval.setter
    def time_interval(self, time_interval):
        """Sets the time_interval of this ComplexBid.


        :param time_interval: The time_interval of this ComplexBid.  # noqa: E501
        :type: TimeInterval
        """

        self._time_interval = time_interval

    @property
    def connecting_zone(self):
        """Gets the connecting_zone of this ComplexBid.  # noqa: E501


        :return: The connecting_zone of this ComplexBid.  # noqa: E501
        :rtype: ConnectingZone
        """
        return self._connecting_zone

    @connecting_zone.setter
    def connecting_zone(self, connecting_zone):
        """Sets the connecting_zone of this ComplexBid.


        :param connecting_zone: The connecting_zone of this ComplexBid.  # noqa: E501
        :type: ConnectingZone
        """

        self._connecting_zone = connecting_zone

    @property
    def activation(self):
        """Gets the activation of this ComplexBid.  # noqa: E501


        :return: The activation of this ComplexBid.  # noqa: E501
        :rtype: ActivationType
        """
        return self._activation

    @activation.setter
    def activation(self, activation):
        """Sets the activation of this ComplexBid.


        :param activation: The activation of this ComplexBid.  # noqa: E501
        :type: ActivationType
        """

        self._activation = activation

    @property
    def technical_linkage(self):
        """Gets the technical_linkage of this ComplexBid.  # noqa: E501


        :return: The technical_linkage of this ComplexBid.  # noqa: E501
        :rtype: TechnicalLinkage
        """
        return self._technical_linkage

    @technical_linkage.setter
    def technical_linkage(self, technical_linkage):
        """Sets the technical_linkage of this ComplexBid.


        :param technical_linkage: The technical_linkage of this ComplexBid.  # noqa: E501
        :type: TechnicalLinkage
        """

        self._technical_linkage = technical_linkage

    @property
    def backup_for(self):
        """Gets the backup_for of this ComplexBid.  # noqa: E501


        :return: The backup_for of this ComplexBid.  # noqa: E501
        :rtype: BalancingServiceProvider
        """
        return self._backup_for

    @backup_for.setter
    def backup_for(self, backup_for):
        """Sets the backup_for of this ComplexBid.


        :param backup_for: The backup_for of this ComplexBid.  # noqa: E501
        :type: BalancingServiceProvider
        """

        self._backup_for = backup_for

    @property
    def tag(self):
        """Gets the tag of this ComplexBid.  # noqa: E501


        :return: The tag of this ComplexBid.  # noqa: E501
        :rtype: BidTag
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ComplexBid.


        :param tag: The tag of this ComplexBid.  # noqa: E501
        :type: BidTag
        """

        self._tag = tag

    @property
    def components(self):
        """Gets the components of this ComplexBid.  # noqa: E501


        :return: The components of this ComplexBid.  # noqa: E501
        :rtype: list[ComplexBidComponent]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this ComplexBid.


        :param components: The components of this ComplexBid.  # noqa: E501
        :type: list[ComplexBidComponent]
        """
        if components is None:
            raise ValueError("Invalid value for `components`, must not be `None`")  # noqa: E501

        self._components = components

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComplexBid, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComplexBid):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
