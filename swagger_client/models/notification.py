# coding: utf-8

"""
    IP RL BSP API

    IP RL BSP API for participation in capacity/energy market tenders.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Notification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'ResourceIdentification',
        'title': 'str',
        'reason_code': 'str',
        'published_at': 'datetime',
        'reference': 'NotificationReference'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'reason_code': 'reasonCode',
        'published_at': 'publishedAt',
        'reference': 'reference'
    }

    def __init__(self, id=None, title=None, reason_code=None, published_at=None, reference=None):  # noqa: E501
        """Notification - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._reason_code = None
        self._published_at = None
        self._reference = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if reason_code is not None:
            self.reason_code = reason_code
        if published_at is not None:
            self.published_at = published_at
        if reference is not None:
            self.reference = reference

    @property
    def id(self):
        """Gets the id of this Notification.  # noqa: E501


        :return: The id of this Notification.  # noqa: E501
        :rtype: ResourceIdentification
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Notification.


        :param id: The id of this Notification.  # noqa: E501
        :type: ResourceIdentification
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this Notification.  # noqa: E501

        A short, human-readable summary.  # noqa: E501

        :return: The title of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Notification.

        A short, human-readable summary.  # noqa: E501

        :param title: The title of this Notification.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def reason_code(self):
        """Gets the reason_code of this Notification.  # noqa: E501

        The ReasonCode is used to identify the technical reason for the current notification. A list of reason codes can be found in the API documentation.   # noqa: E501

        :return: The reason_code of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this Notification.

        The ReasonCode is used to identify the technical reason for the current notification. A list of reason codes can be found in the API documentation.   # noqa: E501

        :param reason_code: The reason_code of this Notification.  # noqa: E501
        :type: str
        """

        self._reason_code = reason_code

    @property
    def published_at(self):
        """Gets the published_at of this Notification.  # noqa: E501

        Publishing time of the notification.  # noqa: E501

        :return: The published_at of this Notification.  # noqa: E501
        :rtype: datetime
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at):
        """Sets the published_at of this Notification.

        Publishing time of the notification.  # noqa: E501

        :param published_at: The published_at of this Notification.  # noqa: E501
        :type: datetime
        """

        self._published_at = published_at

    @property
    def reference(self):
        """Gets the reference of this Notification.  # noqa: E501


        :return: The reference of this Notification.  # noqa: E501
        :rtype: NotificationReference
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Notification.


        :param reference: The reference of this Notification.  # noqa: E501
        :type: NotificationReference
        """

        self._reference = reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Notification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Notification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
