# coding: utf-8

"""
    IP RL BSP API

    IP RL BSP API for participation in capacity/energy market tenders.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Price(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'measure_unit': 'str',
        'resolution': 'str',
        'currency': 'str',
        'payment_direction': 'str',
        'type': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'measure_unit': 'measureUnit',
        'resolution': 'resolution',
        'currency': 'currency',
        'payment_direction': 'paymentDirection',
        'type': 'type'
    }

    def __init__(self, amount=None, measure_unit=None, resolution=None, currency='EUR', payment_direction='GRID_TO_PROVIDER', type=None):  # noqa: E501
        """Price - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._measure_unit = None
        self._resolution = None
        self._currency = None
        self._payment_direction = None
        self._type = None
        self.discriminator = None
        self.amount = amount
        self.measure_unit = measure_unit
        if resolution is not None:
            self.resolution = resolution
        if currency is not None:
            self.currency = currency
        if payment_direction is not None:
            self.payment_direction = payment_direction
        if type is not None:
            self.type = type

    @property
    def amount(self):
        """Gets the amount of this Price.  # noqa: E501

        Specify the amount.  # noqa: E501

        :return: The amount of this Price.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Price.

        Specify the amount.  # noqa: E501

        :param amount: The amount of this Price.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def measure_unit(self):
        """Gets the measure_unit of this Price.  # noqa: E501

        The unit of measurement underlying the price (MW per unit (code MAW), MWh per unit (code MWH)) is used to differentiate between capacity fees (EUR/MW) and energy prices (EUR/MWh). The units of measurement are in accordance with UN/ECE Recommendation 20.  # noqa: E501

        :return: The measure_unit of this Price.  # noqa: E501
        :rtype: str
        """
        return self._measure_unit

    @measure_unit.setter
    def measure_unit(self, measure_unit):
        """Sets the measure_unit of this Price.

        The unit of measurement underlying the price (MW per unit (code MAW), MWh per unit (code MWH)) is used to differentiate between capacity fees (EUR/MW) and energy prices (EUR/MWh). The units of measurement are in accordance with UN/ECE Recommendation 20.  # noqa: E501

        :param measure_unit: The measure_unit of this Price.  # noqa: E501
        :type: str
        """
        if measure_unit is None:
            raise ValueError("Invalid value for `measure_unit`, must not be `None`")  # noqa: E501
        allowed_values = ["MAW", "MWH"]  # noqa: E501
        if measure_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `measure_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(measure_unit, allowed_values)
            )

        self._measure_unit = measure_unit

    @property
    def resolution(self):
        """Gets the resolution of this Price.  # noqa: E501

        Capacity price resolution in ISO 8601 format. This field is read-only for control purposes. It is determined automatically depending on the modalities applicable to the tender.  # noqa: E501

        :return: The resolution of this Price.  # noqa: E501
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this Price.

        Capacity price resolution in ISO 8601 format. This field is read-only for control purposes. It is determined automatically depending on the modalities applicable to the tender.  # noqa: E501

        :param resolution: The resolution of this Price.  # noqa: E501
        :type: str
        """
        allowed_values = ["PT1H", "PT3H", "PT4H", "PT5H", "P1D"]  # noqa: E501
        if resolution not in allowed_values:
            raise ValueError(
                "Invalid value for `resolution` ({0}), must be one of {1}"  # noqa: E501
                .format(resolution, allowed_values)
            )

        self._resolution = resolution

    @property
    def currency(self):
        """Gets the currency of this Price.  # noqa: E501

        The currency in which the monetary amount is expressed. The maximum length of this information is 3 alphanumeric characters respecting the standard ISO 4217.  # noqa: E501

        :return: The currency of this Price.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Price.

        The currency in which the monetary amount is expressed. The maximum length of this information is 3 alphanumeric characters respecting the standard ISO 4217.  # noqa: E501

        :param currency: The currency of this Price.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def payment_direction(self):
        """Gets the payment_direction of this Price.  # noqa: E501

        The direction of payment for activated control power relates to the energy price only (measureUnit = MWH).  # noqa: E501

        :return: The payment_direction of this Price.  # noqa: E501
        :rtype: str
        """
        return self._payment_direction

    @payment_direction.setter
    def payment_direction(self, payment_direction):
        """Sets the payment_direction of this Price.

        The direction of payment for activated control power relates to the energy price only (measureUnit = MWH).  # noqa: E501

        :param payment_direction: The payment_direction of this Price.  # noqa: E501
        :type: str
        """
        allowed_values = ["PROVIDER_TO_GRID", "GRID_TO_PROVIDER"]  # noqa: E501
        if payment_direction not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_direction` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_direction, allowed_values)
            )

        self._payment_direction = payment_direction

    @property
    def type(self):
        """Gets the type of this Price.  # noqa: E501

        Type of price. When bidding, the type must have the value `OFFER`.   # noqa: E501

        :return: The type of this Price.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Price.

        Type of price. When bidding, the type must have the value `OFFER`.   # noqa: E501

        :param type: The type of this Price.  # noqa: E501
        :type: str
        """
        allowed_values = ["OFFER", "SETTLEMENT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Price, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Price):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
