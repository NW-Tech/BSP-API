# coding: utf-8

"""
    IP RL BSP API

    IP RL BSP API for participation in capacity/energy market tenders.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BatchRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ops': 'list[BatchOperation]',
        'parallel': 'bool'
    }

    attribute_map = {
        'ops': 'ops',
        'parallel': 'parallel'
    }

    def __init__(self, ops=None, parallel=False):  # noqa: E501
        """BatchRequest - a model defined in Swagger"""  # noqa: E501
        self._ops = None
        self._parallel = None
        self.discriminator = None
        self.ops = ops
        if parallel is not None:
            self.parallel = parallel

    @property
    def ops(self):
        """Gets the ops of this BatchRequest.  # noqa: E501

        List of operations to be processed.  # noqa: E501

        :return: The ops of this BatchRequest.  # noqa: E501
        :rtype: list[BatchOperation]
        """
        return self._ops

    @ops.setter
    def ops(self, ops):
        """Sets the ops of this BatchRequest.

        List of operations to be processed.  # noqa: E501

        :param ops: The ops of this BatchRequest.  # noqa: E501
        :type: list[BatchOperation]
        """
        if ops is None:
            raise ValueError("Invalid value for `ops`, must not be `None`")  # noqa: E501

        self._ops = ops

    @property
    def parallel(self):
        """Gets the parallel of this BatchRequest.  # noqa: E501

        If true, then the operations can be executed in arbitrary order and in parallel. If false, then serial execution in request order will be enforced. This property has no impact on the results order in the batch response object.  # noqa: E501

        :return: The parallel of this BatchRequest.  # noqa: E501
        :rtype: bool
        """
        return self._parallel

    @parallel.setter
    def parallel(self, parallel):
        """Sets the parallel of this BatchRequest.

        If true, then the operations can be executed in arbitrary order and in parallel. If false, then serial execution in request order will be enforced. This property has no impact on the results order in the batch response object.  # noqa: E501

        :param parallel: The parallel of this BatchRequest.  # noqa: E501
        :type: bool
        """

        self._parallel = parallel

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
