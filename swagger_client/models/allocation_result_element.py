# coding: utf-8

"""
    IP RL BSP API

    IP RL BSP API for participation in capacity/energy market tenders.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AllocationResultElement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_type': 'ProductType',
        'delivery_date': 'date',
        'product_name': 'ProductName',
        'direction': 'Direction',
        'time_interval': 'TimeInterval',
        'connecting_zone': 'ConnectingZone',
        'market': 'ReserveMarket',
        'status': 'str',
        'allocation_ranking': 'int',
        'activation_ranking': 'int',
        'indivisible': 'bool',
        'offered_quantity': 'Quantity',
        'accepted_quantity': 'Quantity',
        'prices': 'list[Price]'
    }

    attribute_map = {
        'product_type': 'productType',
        'delivery_date': 'deliveryDate',
        'product_name': 'productName',
        'direction': 'direction',
        'time_interval': 'timeInterval',
        'connecting_zone': 'connectingZone',
        'market': 'market',
        'status': 'status',
        'allocation_ranking': 'allocationRanking',
        'activation_ranking': 'activationRanking',
        'indivisible': 'indivisible',
        'offered_quantity': 'offeredQuantity',
        'accepted_quantity': 'acceptedQuantity',
        'prices': 'prices'
    }

    def __init__(self, product_type=None, delivery_date=None, product_name=None, direction=None, time_interval=None, connecting_zone=None, market=None, status=None, allocation_ranking=None, activation_ranking=None, indivisible=False, offered_quantity=None, accepted_quantity=None, prices=None):  # noqa: E501
        """AllocationResultElement - a model defined in Swagger"""  # noqa: E501
        self._product_type = None
        self._delivery_date = None
        self._product_name = None
        self._direction = None
        self._time_interval = None
        self._connecting_zone = None
        self._market = None
        self._status = None
        self._allocation_ranking = None
        self._activation_ranking = None
        self._indivisible = None
        self._offered_quantity = None
        self._accepted_quantity = None
        self._prices = None
        self.discriminator = None
        if product_type is not None:
            self.product_type = product_type
        if delivery_date is not None:
            self.delivery_date = delivery_date
        if product_name is not None:
            self.product_name = product_name
        if direction is not None:
            self.direction = direction
        if time_interval is not None:
            self.time_interval = time_interval
        if connecting_zone is not None:
            self.connecting_zone = connecting_zone
        if market is not None:
            self.market = market
        if status is not None:
            self.status = status
        if allocation_ranking is not None:
            self.allocation_ranking = allocation_ranking
        if activation_ranking is not None:
            self.activation_ranking = activation_ranking
        if indivisible is not None:
            self.indivisible = indivisible
        if offered_quantity is not None:
            self.offered_quantity = offered_quantity
        if accepted_quantity is not None:
            self.accepted_quantity = accepted_quantity
        if prices is not None:
            self.prices = prices

    @property
    def product_type(self):
        """Gets the product_type of this AllocationResultElement.  # noqa: E501


        :return: The product_type of this AllocationResultElement.  # noqa: E501
        :rtype: ProductType
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this AllocationResultElement.


        :param product_type: The product_type of this AllocationResultElement.  # noqa: E501
        :type: ProductType
        """

        self._product_type = product_type

    @property
    def delivery_date(self):
        """Gets the delivery_date of this AllocationResultElement.  # noqa: E501

        Delivery day of offered control reserve / energy. (ISO 8601 format YYYY-MM-DD).  # noqa: E501

        :return: The delivery_date of this AllocationResultElement.  # noqa: E501
        :rtype: date
        """
        return self._delivery_date

    @delivery_date.setter
    def delivery_date(self, delivery_date):
        """Sets the delivery_date of this AllocationResultElement.

        Delivery day of offered control reserve / energy. (ISO 8601 format YYYY-MM-DD).  # noqa: E501

        :param delivery_date: The delivery_date of this AllocationResultElement.  # noqa: E501
        :type: date
        """

        self._delivery_date = delivery_date

    @property
    def product_name(self):
        """Gets the product_name of this AllocationResultElement.  # noqa: E501


        :return: The product_name of this AllocationResultElement.  # noqa: E501
        :rtype: ProductName
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this AllocationResultElement.


        :param product_name: The product_name of this AllocationResultElement.  # noqa: E501
        :type: ProductName
        """

        self._product_name = product_name

    @property
    def direction(self):
        """Gets the direction of this AllocationResultElement.  # noqa: E501


        :return: The direction of this AllocationResultElement.  # noqa: E501
        :rtype: Direction
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this AllocationResultElement.


        :param direction: The direction of this AllocationResultElement.  # noqa: E501
        :type: Direction
        """

        self._direction = direction

    @property
    def time_interval(self):
        """Gets the time_interval of this AllocationResultElement.  # noqa: E501


        :return: The time_interval of this AllocationResultElement.  # noqa: E501
        :rtype: TimeInterval
        """
        return self._time_interval

    @time_interval.setter
    def time_interval(self, time_interval):
        """Sets the time_interval of this AllocationResultElement.


        :param time_interval: The time_interval of this AllocationResultElement.  # noqa: E501
        :type: TimeInterval
        """

        self._time_interval = time_interval

    @property
    def connecting_zone(self):
        """Gets the connecting_zone of this AllocationResultElement.  # noqa: E501


        :return: The connecting_zone of this AllocationResultElement.  # noqa: E501
        :rtype: ConnectingZone
        """
        return self._connecting_zone

    @connecting_zone.setter
    def connecting_zone(self, connecting_zone):
        """Sets the connecting_zone of this AllocationResultElement.


        :param connecting_zone: The connecting_zone of this AllocationResultElement.  # noqa: E501
        :type: ConnectingZone
        """

        self._connecting_zone = connecting_zone

    @property
    def market(self):
        """Gets the market of this AllocationResultElement.  # noqa: E501


        :return: The market of this AllocationResultElement.  # noqa: E501
        :rtype: ReserveMarket
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this AllocationResultElement.


        :param market: The market of this AllocationResultElement.  # noqa: E501
        :type: ReserveMarket
        """

        self._market = market

    @property
    def status(self):
        """Gets the status of this AllocationResultElement.  # noqa: E501


        :return: The status of this AllocationResultElement.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AllocationResultElement.


        :param status: The status of this AllocationResultElement.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACCEPTED", "REJECTED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def allocation_ranking(self):
        """Gets the allocation_ranking of this AllocationResultElement.  # noqa: E501

        Specifies the allocation ranking of bids as a natural number in ascending order starting at 1.  # noqa: E501

        :return: The allocation_ranking of this AllocationResultElement.  # noqa: E501
        :rtype: int
        """
        return self._allocation_ranking

    @allocation_ranking.setter
    def allocation_ranking(self, allocation_ranking):
        """Sets the allocation_ranking of this AllocationResultElement.

        Specifies the allocation ranking of bids as a natural number in ascending order starting at 1.  # noqa: E501

        :param allocation_ranking: The allocation_ranking of this AllocationResultElement.  # noqa: E501
        :type: int
        """

        self._allocation_ranking = allocation_ranking

    @property
    def activation_ranking(self):
        """Gets the activation_ranking of this AllocationResultElement.  # noqa: E501

        Specifies the activation ranking of accepted aFRR/mFRR bids as a natural number in ascending order starting at 1.  # noqa: E501

        :return: The activation_ranking of this AllocationResultElement.  # noqa: E501
        :rtype: int
        """
        return self._activation_ranking

    @activation_ranking.setter
    def activation_ranking(self, activation_ranking):
        """Sets the activation_ranking of this AllocationResultElement.

        Specifies the activation ranking of accepted aFRR/mFRR bids as a natural number in ascending order starting at 1.  # noqa: E501

        :param activation_ranking: The activation_ranking of this AllocationResultElement.  # noqa: E501
        :type: int
        """

        self._activation_ranking = activation_ranking

    @property
    def indivisible(self):
        """Gets the indivisible of this AllocationResultElement.  # noqa: E501


        :return: The indivisible of this AllocationResultElement.  # noqa: E501
        :rtype: bool
        """
        return self._indivisible

    @indivisible.setter
    def indivisible(self, indivisible):
        """Sets the indivisible of this AllocationResultElement.


        :param indivisible: The indivisible of this AllocationResultElement.  # noqa: E501
        :type: bool
        """

        self._indivisible = indivisible

    @property
    def offered_quantity(self):
        """Gets the offered_quantity of this AllocationResultElement.  # noqa: E501


        :return: The offered_quantity of this AllocationResultElement.  # noqa: E501
        :rtype: Quantity
        """
        return self._offered_quantity

    @offered_quantity.setter
    def offered_quantity(self, offered_quantity):
        """Sets the offered_quantity of this AllocationResultElement.


        :param offered_quantity: The offered_quantity of this AllocationResultElement.  # noqa: E501
        :type: Quantity
        """

        self._offered_quantity = offered_quantity

    @property
    def accepted_quantity(self):
        """Gets the accepted_quantity of this AllocationResultElement.  # noqa: E501


        :return: The accepted_quantity of this AllocationResultElement.  # noqa: E501
        :rtype: Quantity
        """
        return self._accepted_quantity

    @accepted_quantity.setter
    def accepted_quantity(self, accepted_quantity):
        """Sets the accepted_quantity of this AllocationResultElement.


        :param accepted_quantity: The accepted_quantity of this AllocationResultElement.  # noqa: E501
        :type: Quantity
        """

        self._accepted_quantity = accepted_quantity

    @property
    def prices(self):
        """Gets the prices of this AllocationResultElement.  # noqa: E501

        Price informations.  # noqa: E501

        :return: The prices of this AllocationResultElement.  # noqa: E501
        :rtype: list[Price]
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """Sets the prices of this AllocationResultElement.

        Price informations.  # noqa: E501

        :param prices: The prices of this AllocationResultElement.  # noqa: E501
        :type: list[Price]
        """

        self._prices = prices

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllocationResultElement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllocationResultElement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
