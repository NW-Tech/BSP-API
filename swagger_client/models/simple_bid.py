# coding: utf-8

"""
    IP RL BSP API

    IP RL BSP API for participation in capacity/energy market tenders.  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SimpleBid(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'market': 'ReserveMarket',
        'product_type': 'ProductType',
        'group_id': 'BidIdentification',
        'bid_type': 'BidType',
        'delivery_date': 'DeliveryDate',
        'product_name': 'ProductName',
        'time_interval': 'TimeInterval',
        'direction': 'Direction',
        'connecting_zone': 'ConnectingZone',
        'activation': 'ActivationType',
        'min_quantity': 'Quantity',
        'offered_quantity': 'Quantity',
        'prices': 'Prices',
        'technical_linkage': 'TechnicalLinkage',
        'conditional_linkage': 'ConditionalLinkage',
        'backup_for': 'BalancingServiceProvider',
        'tag': 'BidTag'
    }

    attribute_map = {
        'market': 'market',
        'product_type': 'productType',
        'group_id': 'groupId',
        'bid_type': 'bidType',
        'delivery_date': 'deliveryDate',
        'product_name': 'productName',
        'time_interval': 'timeInterval',
        'direction': 'direction',
        'connecting_zone': 'connectingZone',
        'activation': 'activation',
        'min_quantity': 'minQuantity',
        'offered_quantity': 'offeredQuantity',
        'prices': 'prices',
        'technical_linkage': 'technicalLinkage',
        'conditional_linkage': 'conditionalLinkage',
        'backup_for': 'backupFor',
        'tag': 'tag'
    }

    def __init__(self, market=None, product_type=None, group_id=None, bid_type=None, delivery_date=None, product_name=None, time_interval=None, direction=None, connecting_zone=None, activation=None, min_quantity=None, offered_quantity=None, prices=None, technical_linkage=None, conditional_linkage=None, backup_for=None, tag=None):  # noqa: E501
        """SimpleBid - a model defined in Swagger"""  # noqa: E501
        self._market = None
        self._product_type = None
        self._group_id = None
        self._bid_type = None
        self._delivery_date = None
        self._product_name = None
        self._time_interval = None
        self._direction = None
        self._connecting_zone = None
        self._activation = None
        self._min_quantity = None
        self._offered_quantity = None
        self._prices = None
        self._technical_linkage = None
        self._conditional_linkage = None
        self._backup_for = None
        self._tag = None
        self.discriminator = None
        self.market = market
        self.product_type = product_type
        if group_id is not None:
            self.group_id = group_id
        if bid_type is not None:
            self.bid_type = bid_type
        if delivery_date is not None:
            self.delivery_date = delivery_date
        if product_name is not None:
            self.product_name = product_name
        if time_interval is not None:
            self.time_interval = time_interval
        if direction is not None:
            self.direction = direction
        self.connecting_zone = connecting_zone
        if activation is not None:
            self.activation = activation
        if min_quantity is not None:
            self.min_quantity = min_quantity
        self.offered_quantity = offered_quantity
        self.prices = prices
        if technical_linkage is not None:
            self.technical_linkage = technical_linkage
        if conditional_linkage is not None:
            self.conditional_linkage = conditional_linkage
        if backup_for is not None:
            self.backup_for = backup_for
        if tag is not None:
            self.tag = tag

    @property
    def market(self):
        """Gets the market of this SimpleBid.  # noqa: E501


        :return: The market of this SimpleBid.  # noqa: E501
        :rtype: ReserveMarket
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this SimpleBid.


        :param market: The market of this SimpleBid.  # noqa: E501
        :type: ReserveMarket
        """
        if market is None:
            raise ValueError("Invalid value for `market`, must not be `None`")  # noqa: E501

        self._market = market

    @property
    def product_type(self):
        """Gets the product_type of this SimpleBid.  # noqa: E501


        :return: The product_type of this SimpleBid.  # noqa: E501
        :rtype: ProductType
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this SimpleBid.


        :param product_type: The product_type of this SimpleBid.  # noqa: E501
        :type: ProductType
        """
        if product_type is None:
            raise ValueError("Invalid value for `product_type`, must not be `None`")  # noqa: E501

        self._product_type = product_type

    @property
    def group_id(self):
        """Gets the group_id of this SimpleBid.  # noqa: E501


        :return: The group_id of this SimpleBid.  # noqa: E501
        :rtype: BidIdentification
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this SimpleBid.


        :param group_id: The group_id of this SimpleBid.  # noqa: E501
        :type: BidIdentification
        """

        self._group_id = group_id

    @property
    def bid_type(self):
        """Gets the bid_type of this SimpleBid.  # noqa: E501


        :return: The bid_type of this SimpleBid.  # noqa: E501
        :rtype: BidType
        """
        return self._bid_type

    @bid_type.setter
    def bid_type(self, bid_type):
        """Sets the bid_type of this SimpleBid.


        :param bid_type: The bid_type of this SimpleBid.  # noqa: E501
        :type: BidType
        """

        self._bid_type = bid_type

    @property
    def delivery_date(self):
        """Gets the delivery_date of this SimpleBid.  # noqa: E501


        :return: The delivery_date of this SimpleBid.  # noqa: E501
        :rtype: DeliveryDate
        """
        return self._delivery_date

    @delivery_date.setter
    def delivery_date(self, delivery_date):
        """Sets the delivery_date of this SimpleBid.


        :param delivery_date: The delivery_date of this SimpleBid.  # noqa: E501
        :type: DeliveryDate
        """

        self._delivery_date = delivery_date

    @property
    def product_name(self):
        """Gets the product_name of this SimpleBid.  # noqa: E501


        :return: The product_name of this SimpleBid.  # noqa: E501
        :rtype: ProductName
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this SimpleBid.


        :param product_name: The product_name of this SimpleBid.  # noqa: E501
        :type: ProductName
        """

        self._product_name = product_name

    @property
    def time_interval(self):
        """Gets the time_interval of this SimpleBid.  # noqa: E501


        :return: The time_interval of this SimpleBid.  # noqa: E501
        :rtype: TimeInterval
        """
        return self._time_interval

    @time_interval.setter
    def time_interval(self, time_interval):
        """Sets the time_interval of this SimpleBid.


        :param time_interval: The time_interval of this SimpleBid.  # noqa: E501
        :type: TimeInterval
        """

        self._time_interval = time_interval

    @property
    def direction(self):
        """Gets the direction of this SimpleBid.  # noqa: E501


        :return: The direction of this SimpleBid.  # noqa: E501
        :rtype: Direction
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this SimpleBid.


        :param direction: The direction of this SimpleBid.  # noqa: E501
        :type: Direction
        """

        self._direction = direction

    @property
    def connecting_zone(self):
        """Gets the connecting_zone of this SimpleBid.  # noqa: E501


        :return: The connecting_zone of this SimpleBid.  # noqa: E501
        :rtype: ConnectingZone
        """
        return self._connecting_zone

    @connecting_zone.setter
    def connecting_zone(self, connecting_zone):
        """Sets the connecting_zone of this SimpleBid.


        :param connecting_zone: The connecting_zone of this SimpleBid.  # noqa: E501
        :type: ConnectingZone
        """
        if connecting_zone is None:
            raise ValueError("Invalid value for `connecting_zone`, must not be `None`")  # noqa: E501

        self._connecting_zone = connecting_zone

    @property
    def activation(self):
        """Gets the activation of this SimpleBid.  # noqa: E501


        :return: The activation of this SimpleBid.  # noqa: E501
        :rtype: ActivationType
        """
        return self._activation

    @activation.setter
    def activation(self, activation):
        """Sets the activation of this SimpleBid.


        :param activation: The activation of this SimpleBid.  # noqa: E501
        :type: ActivationType
        """

        self._activation = activation

    @property
    def min_quantity(self):
        """Gets the min_quantity of this SimpleBid.  # noqa: E501


        :return: The min_quantity of this SimpleBid.  # noqa: E501
        :rtype: Quantity
        """
        return self._min_quantity

    @min_quantity.setter
    def min_quantity(self, min_quantity):
        """Sets the min_quantity of this SimpleBid.


        :param min_quantity: The min_quantity of this SimpleBid.  # noqa: E501
        :type: Quantity
        """

        self._min_quantity = min_quantity

    @property
    def offered_quantity(self):
        """Gets the offered_quantity of this SimpleBid.  # noqa: E501


        :return: The offered_quantity of this SimpleBid.  # noqa: E501
        :rtype: Quantity
        """
        return self._offered_quantity

    @offered_quantity.setter
    def offered_quantity(self, offered_quantity):
        """Sets the offered_quantity of this SimpleBid.


        :param offered_quantity: The offered_quantity of this SimpleBid.  # noqa: E501
        :type: Quantity
        """
        if offered_quantity is None:
            raise ValueError("Invalid value for `offered_quantity`, must not be `None`")  # noqa: E501

        self._offered_quantity = offered_quantity

    @property
    def prices(self):
        """Gets the prices of this SimpleBid.  # noqa: E501


        :return: The prices of this SimpleBid.  # noqa: E501
        :rtype: Prices
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """Sets the prices of this SimpleBid.


        :param prices: The prices of this SimpleBid.  # noqa: E501
        :type: Prices
        """
        if prices is None:
            raise ValueError("Invalid value for `prices`, must not be `None`")  # noqa: E501

        self._prices = prices

    @property
    def technical_linkage(self):
        """Gets the technical_linkage of this SimpleBid.  # noqa: E501


        :return: The technical_linkage of this SimpleBid.  # noqa: E501
        :rtype: TechnicalLinkage
        """
        return self._technical_linkage

    @technical_linkage.setter
    def technical_linkage(self, technical_linkage):
        """Sets the technical_linkage of this SimpleBid.


        :param technical_linkage: The technical_linkage of this SimpleBid.  # noqa: E501
        :type: TechnicalLinkage
        """

        self._technical_linkage = technical_linkage

    @property
    def conditional_linkage(self):
        """Gets the conditional_linkage of this SimpleBid.  # noqa: E501


        :return: The conditional_linkage of this SimpleBid.  # noqa: E501
        :rtype: ConditionalLinkage
        """
        return self._conditional_linkage

    @conditional_linkage.setter
    def conditional_linkage(self, conditional_linkage):
        """Sets the conditional_linkage of this SimpleBid.


        :param conditional_linkage: The conditional_linkage of this SimpleBid.  # noqa: E501
        :type: ConditionalLinkage
        """

        self._conditional_linkage = conditional_linkage

    @property
    def backup_for(self):
        """Gets the backup_for of this SimpleBid.  # noqa: E501


        :return: The backup_for of this SimpleBid.  # noqa: E501
        :rtype: BalancingServiceProvider
        """
        return self._backup_for

    @backup_for.setter
    def backup_for(self, backup_for):
        """Sets the backup_for of this SimpleBid.


        :param backup_for: The backup_for of this SimpleBid.  # noqa: E501
        :type: BalancingServiceProvider
        """

        self._backup_for = backup_for

    @property
    def tag(self):
        """Gets the tag of this SimpleBid.  # noqa: E501


        :return: The tag of this SimpleBid.  # noqa: E501
        :rtype: BidTag
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this SimpleBid.


        :param tag: The tag of this SimpleBid.  # noqa: E501
        :type: BidTag
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimpleBid, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimpleBid):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
